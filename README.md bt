---------------------------------------------------------------------------------------------------------------------------------
                                          -- === Tab 3: Carro === --
---------------------------------------------------------------------------------------------------------------------------------

-- Carrega a biblioteca Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Cria uma janela com Rayfield
local Window = Rayfield:CreateWindow({
    Name = "Carro Interface",
    LoadingTitle = "Carregando Interface de Carros...",
    LoadingSubtitle = "by Grok",
    ConfigurationSaving = {
        Enabled = false,
        FolderName = nil,
        FileName = "CarroHub"
    },
    KeySystem = false
})

-- Cria a aba "Carro"
local CarTab = Window:CreateTab("Carro", nil)

-- Variável para armazenar o carro selecionado
local selectedCar = nil

-- Variável para armazenar a posição original do jogador
local originalPosition = nil

-- Função para obter os nomes dos jogadores com carros
local function getPlayerCars()
    local carOwners = {}
    local vehiclesFolder = Workspace:FindFirstChild("Vehicles")
    if vehiclesFolder then
        for _, vehicle in pairs(vehiclesFolder:GetChildren()) do
            if vehicle:IsA("Model") and vehicle:FindFirstChild("Owner") then
                local ownerName = "Desconhecido"
                local ownerValue = vehicle:FindFirstChild("Owner")
                if ownerValue and ownerValue:IsA("StringValue") then
                    ownerName = ownerValue.Value
                else
                    -- Extrai o nome do jogador do nome do carro (ex.: "iker18231Car" -> "iker18231")
                    local nameMatch = vehicle.Name:match("^(.-)Car$")
                    if nameMatch then
                        ownerName = nameMatch
                    end
                end

                -- Verifica se há um jogador sentado
                local seat = vehicle:FindFirstChildOfClass("VehicleSeat") or vehicle:FindFirstChild("Seat") or vehicle:FindFirstChild("DriverSeat")
                if seat and seat:IsA("VehicleSeat") and seat.Occupant then
                    local humanoid = seat.Occupant
                    local seatedPlayer = game.Players:GetPlayerFromCharacter(humanoid.Parent)
                    if seatedPlayer then
                        ownerName = seatedPlayer.Name
                    end
                end

                if ownerName ~= "Desconhecido" then
                    table.insert(carOwners, ownerName)
                end
            end
        end
    end

    if #carOwners == 0 then
        carOwners = {"Nenhum carro encontrado"}
    end

    -- Notificação para confirmar os nomes carregados
    Rayfield:Notify({
        Title = "Carros Carregados",
        Content = "Jogadores com carros: " .. table.concat(carOwners, ", "),
        Duration = 5
    })

    return carOwners
end

-- Função para obter o carro pelo nome do jogador
local function getCarByName(name)
    local vehiclesFolder = Workspace:FindFirstChild("Vehicles")
    if vehiclesFolder then
        for _, vehicle in pairs(vehiclesFolder:GetChildren()) do
            if vehicle:IsA("Model") and vehicle:FindFirstChild("Owner") then
                local ownerName = "Desconhecido"
                local ownerValue = vehicle:FindFirstChild("Owner")
                if ownerValue and ownerValue:IsA("StringValue") then
                    ownerName = ownerValue.Value
                else
                    local nameMatch = vehicle.Name:match("^(.-)Car$")
                    if nameMatch then
                        ownerName = nameMatch
                    end
                end

                local seat = vehicle:FindFirstChildOfClass("VehicleSeat") or vehicle:FindFirstChild("Seat") or vehicle:FindFirstChild("DriverSeat")
                if seat and seat:IsA("VehicleSeat") and seat.Occupant then
                    local humanoid = seat.Occupant
                    local seatedPlayer = game.Players:GetPlayerFromCharacter(humanoid.Parent)
                    if seatedPlayer then
                        ownerName = seatedPlayer.Name
                    end
                end

                if ownerName == name then
                    return vehicle
                end
            end
        end
    end
    return nil
end

-- Variável para armazenar o dropdown
local DropdownCar = nil

-- Função para atualizar o dropdown
local function updateDropdown()
    local success, result = pcall(function()
        DropdownCar:Refresh(getPlayerCars(), true)
    end)
    if not success then
        Rayfield:Notify({
            Title = "Erro",
            Content = "Falha ao atualizar o dropdown: " .. tostring(result),
            Duration = 5
        })
    end
end

-- Cria o dropdown
DropdownCar = CarTab:CreateDropdown({
    Name = "Selecionar Carro",
    Options = getPlayerCars(),
    CurrentOption = "",
    Flag = "DropdownCar",
    Callback = function(option)
        selectedCar = getCarByName(option)
        if selectedCar then
            Rayfield:Notify({
                Title = "Carro Selecionado",
                Content = "Carro de " .. option .. " selecionado!",
                Duration = 5
            })
        else
            Rayfield:Notify({
                Title = "Erro",
                Content = "Carro não encontrado!",
                Duration = 5
            })
        end
    end,
})

-- Atualiza o dropdown quando um carro é adicionado ou removido
local vehiclesFolder = Workspace:FindFirstChild("Vehicles")
if vehiclesFolder then
    vehiclesFolder.ChildAdded:Connect(function()
        updateDropdown()
    end)
    vehiclesFolder.ChildRemoved:Connect(function()
        updateDropdown()
    end)
end

-- Atualiza o dropdown quando um jogador entra ou sai
game.Players.PlayerAdded:Connect(function()
    updateDropdown()
end)
game.Players.PlayerRemoving:Connect(function()
    updateDropdown()
end)

-- Botão para atualizar a lista de carros manualmente
CarTab:CreateButton({
    Name = "Atualizar Lista de Carros",
    Info = "Atualiza a lista de carros disponíveis",
    Callback = function()
        updateDropdown()
        Rayfield:Notify({
            Title = "Sucesso",
            Content = "Lista de carros atualizada!",
            Duration = 5
        })
    end,
})

-- Botão "Teleportar Carro para o Void"
CarTab:CreateButton({
    Name = "Teleportar Carro para o Void",
    Info = "Teleporta você para o carro e depois o carro para o void",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            Rayfield:Notify({
                Title = "Erro",
                Content = "Personagem não encontrado!",
                Duration = 5
            })
            return
        end

        if not selectedCar then
            Rayfield:Notify({
                Title = "Erro",
                Content = "Nenhum carro selecionado!",
                Duration = 5
            })
            return
        end

        local seat = selectedCar:FindFirstChildOfClass("VehicleSeat") or selectedCar:FindFirstChild("Seat") or selectedCar:FindFirstChild("DriverSeat")
        if not seat then
            Rayfield:Notify({
                Title = "Erro",
                Content = "Assento não encontrado no carro!",
                Duration = 5
            })
            return
        end

        if seat.Occupant then
            Rayfield:Notify({
                Title = "Erro",
                Content = "Há um jogador sentado no assento do motorista!",
                Duration = 5
            })
            return
        end

        -- Salva a posição original do jogador
        originalPosition = character.HumanoidRootPart.Position

        -- Teletransporta o jogador para o assento
        character.HumanoidRootPart.CFrame = seat.CFrame + Vector3.new(0, 2, 0)
        wait(0.5)
        character.Humanoid.Sit = true

        -- Teletransporta o carro para o void
        local voidPosition = Vector3.new(0, -500, 0)
        local success, errorMessage = pcall(function()
            selectedCar:SetPrimaryPartCFrame(CFrame.new(voidPosition + Vector3.new(0, 10, 0)))
        end)

        if not success then
            Rayfield:Notify({
                Title = "Erro",
                Content = "Falha ao teleportar o carro para o void: " .. tostring(errorMessage),
                Duration = 5
            })
            return
        end

        -- Faz o jogador sair do assento e voltar para a posição original
        wait(0.5)
        character.Humanoid.Jump = true
        wait(0.5)
        character.HumanoidRootPart.CFrame = CFrame.new(originalPosition)

        Rayfield:Notify({
            Title = "Sucesso",
            Content = "Carro teleportado para o void e você voltou à sua posição!",
            Duration = 5
        })
    end,
})
