

--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj


--rhguefhgjfgjfgjfhjgfugfgjfhgkjfjkfjfjgfjgfgf gf g fjg     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj



local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()
local Version = "1.4.0"

local Window = WindUI:CreateWindow({
    Title = "Lolyta troll 67475",
    Icon = "door-open",
    Author = "Lolycon666",
    Folder = "Lolyta 666",
    Size = UDim2.fromOffset(580, 460),
    KeySystem = {
        Key = "666",
        Note = "pode nao man",
        URL = "",
        SaveKey = true,
    },
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 200,
    HasOutline = false,
})

Window:EditOpenButton({
    Title = "Lolyta troll",
    Icon = "align-justify",
    CornerRadius = UDim.new(0, 10),
    StrokeThickness = 3,
    Color = ColorSequence.new(Color3.fromHex("FF0F7B"), Color3.fromHex("F89B29"))
})

-- === Abas da Interface === --
local Tab1 = Window:Tab({ Title = "troll", Icon = "Ball" })

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- Variáveis compartilhadas
local selectedPlayer = nil
local isFollowingKill = false
local isFollowingPull = false
local running = false
local connection = nil
local flingConnection = nil
local originalPosition = nil
local savedPosition = nil
local originalProperties = {}
local selectedKillPullMethod = nil
local selectedFlingMethod = nil
local soccerBall = nil
local couch = nil
local isSpectating = false
local spectatedPlayer = nil
local characterConnection = nil

-- Função para obter os nomes dos jogadores, excluindo o jogador local
local function getPlayerNames()
    local playerNames = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playerNames, player.Name)
        end
    end
    return playerNames
end

-- Criar elementos da UI
-- Dropdown para selecionar jogador
local DropdownPlayer
pcall(function()
    DropdownPlayer = Tab1:Dropdown({
        Title = "Selecionar Jogador",
        Description = "Escolha um jogador para interagir",
        Value = "",
        Options = getPlayerNames(),
        Callback = function(value)
            if value == "" then
                selectedPlayer = nil
                if running or isFollowingKill or isFollowingPull then
                    running = false
                    isFollowingKill = false
                    isFollowingPull = false
                    if connection then connection:Disconnect() end
                    if flingConnection then flingConnection:Disconnect() end
                end
                if isSpectating then
                    local character = LocalPlayer.Character
                    if character and character:FindFirstChild("Humanoid") then
                        Workspace.CurrentCamera.CameraSubject = character.Humanoid
                        Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
                    end
                    if characterConnection then
                        characterConnection:Disconnect()
                        characterConnection = nil
                    end
                    isSpectating = false
                    spectatedPlayer = nil
                end
            else
                selectedPlayer = Players:FindFirstChild(value)
                if isSpectating and selectedPlayer then
                    local targetPlayer = selectedPlayer
                    spectatedPlayer = targetPlayer
                    if targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") then
                        Workspace.CurrentCamera.CameraSubject = targetPlayer.Character.Humanoid
                    end
                end
            end
        end
    })
end)

-- Atualizar dropdown quando jogadores entram/saem
Players.PlayerAdded:Connect(function()
    pcall(function()
        DropdownPlayer.Options = getPlayerNames()
    end)
end)

Players.PlayerRemoving:Connect(function(player)
    pcall(function()
        DropdownPlayer.Options = getPlayerNames()
        if selectedPlayer == player then
            selectedPlayer = nil
            if isSpectating then
                local character = LocalPlayer.Character
                if character and character:FindFirstChild("Humanoid") then
                    Workspace.CurrentCamera.CameraSubject = character.Humanoid
                    Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
                end
                if characterConnection then
                    characterConnection:Disconnect()
                    characterConnection = nil
                end
                isSpectating = false
                spectatedPlayer = nil
            end
        end
    end)
end)

-- Dropdown para selecionar método de matar/puxar
pcall(function()
    Tab1:Dropdown({
        Title = "Método (Matar/Puxar)",
        Description = "Escolha o método para matar ou puxar",
        Value = "Sofá",
        Options = {"Sofá", "Ônibus"},
        Callback = function(value)
            selectedKillPullMethod = value
        end
    })
end)

-- Dropdown para selecionar método de fling
pcall(function()
    Tab1:Dropdown({
        Title = "Método de Fling",
        Description = "Escolha o método para fling",
        Value = "Barco",
        Options = {"Sofá", "Ônibus", "Bola", "Barco"},
        Callback = function(value)
            selectedFlingMethod = value
        end
    })
end)

-- Toggle para visualizar jogador
pcall(function()
    Tab1:Toggle({
        Title = "Visualizar Jogador",
        Description = "Ativa/desativa a visualização do jogador",
        Default = false,
        Callback = function(state)
            if state then
                if selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("Humanoid") then
                    spectatedPlayer = selectedPlayer
                    isSpectating = true
                    Workspace.CurrentCamera.CameraSubject = selectedPlayer.Character.Humanoid
                    characterConnection = RunService.Heartbeat:Connect(function()
                        if not isSpectating or not spectatedPlayer or not spectatedPlayer.Character or not spectatedPlayer.Character:FindFirstChild("Humanoid") then
                            characterConnection:Disconnect()
                            characterConnection = nil
                            isSpectating = false
                            spectatedPlayer = nil
                            local character = LocalPlayer.Character
                            if character and character:FindFirstChild("Humanoid") then
                                Workspace.CurrentCamera.CameraSubject = character.Humanoid
                                Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
                            end
                            return
                        end
                        Workspace.CurrentCamera.CameraSubject = spectatedPlayer.Character.Humanoid
                    end)
                else
                    Tab1:Toggle({Title = "Visualizar Jogador", Default = false})
                end
            else
                if characterConnection then
                    characterConnection:Disconnect()
                    characterConnection = nil
                end
                isSpectating = false
                spectatedPlayer = nil
                local character = LocalPlayer.Character
                if character and character:FindFirstChild("Humanoid") then
                    Workspace.CurrentCamera.CameraSubject = character.Humanoid
                    Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
                end
            end
        end
    })
end)

-- Botão para atualizar lista de jogadores
pcall(function()
    Tab1:Button({
        Title = "Atualizar Jogadores",
        Description = "Atualiza a lista de jogadores",
        Callback = function()
            pcall(function()
                DropdownPlayer.Options = getPlayerNames()
            end)
        end
    })
end)

-- Função para equipar o sofá
local function equipSofa()
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local sofa = backpack:FindFirstChild("Couch") or LocalPlayer.Character:FindFirstChild("Couch")
    if not sofa then
        local args = { [1] = "PickingTools", [2] = "Couch" }
        pcall(function()
            ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Too1l"):InvokeServer(unpack(args))
        end)
        local timeout = tick() + 5
        repeat
            sofa = backpack:FindFirstChild("Couch")
            task.wait()
        until sofa or tick() > timeout
        if not sofa then
            return false
        end
    end
    if sofa.Parent ~= LocalPlayer.Character then
        sofa.Parent = LocalPlayer.Character
    end
    return true
end

-- Função para equipar a bola
local function equipBola()
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local bola = backpack:FindFirstChild("SoccerBall") or LocalPlayer.Character:FindFirstChild("SoccerBall")
    if not bola then
        local args = { [1] = "PickingTools", [2] = "SoccerBall" }
        pcall(function()
            ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Too1l"):InvokeServer(unpack(args))
        end)
        local timeout = tick() + 5
        repeat
            bola = backpack:FindFirstChild("SoccerBall")
            task.wait()
        until bola or tick() > timeout
        if not bola then
            return false
        end
    end
    if bola.Parent ~= LocalPlayer.Character then
        bola.Parent = LocalPlayer.Character
    end
    return true
end

-- Função para matar com sofá
local function killWithSofa(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then return end
    if not equipSofa() then return end
    isFollowingKill = true
    originalPosition = LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position
end

-- Função para puxar com sofá
local function pullWithSofa(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then return end
    if not equipSofa() then return end
    isFollowingPull = true
    originalPosition = LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position
end

-- Função para matar com ônibus
local function killWithBus(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then return end
    local character = LocalPlayer.Character
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then return end
    savedPosition = myHRP.Position
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1181.83, 76.08, -1158.83))
        task.wait(0.2)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end)
    task.wait(0.5)
    local args = { [1] = "DeleteAllVehicles" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    args = { [1] = "PickingCar", [2] = "SchoolBus" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    task.wait(2)
    local vehiclesFolder = Workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then return end
    local busName = LocalPlayer.Name .. "Car"
    local bus = vehiclesFolder:FindFirstChild(busName)
    if not bus then return end
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1171.15, 79.45, -1166.2))
        task.wait(0.2)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        humanoid:ChangeState(Enum.HumanoidStateType.Seated)
    end)
    local sitStart = tick()
    repeat
        task.wait()
        if tick() - sitStart > 10 then return end
    until humanoid.Sit
    running = true
    connection = RunService.Stepped:Connect(function()
        if not running then return end
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                pcall(function() part.CanCollide = false end)
            end
        end
    end)
    local lastUpdate = tick()
    local updateInterval = 0.15
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running then return end
        local targetCharacter = targetPlayer.Character
        local newTargetHRP = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")
        local newTargetHumanoid = targetCharacter and targetCharacter:FindFirstChild("Humanoid")
        if not newTargetHRP or not newTargetHumanoid then return end
        if not myHRP or not humanoid then
            running = false
            return
        end
        if tick() - lastUpdate < updateInterval then return end
        lastUpdate = tick()
        local offset = Vector3.new(math.random(-10, 10), 0, math.random(-10, 10))
        pcall(function()
            local targetPosition = newTargetHRP.Position + offset
            bus:PivotTo(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 4000),
                    math.rad(Workspace.DistributedGameTime * 5000),
                    math.rad(Workspace.DistributedGameTime * 6000)
                )
            )
        end)
        local playerSeated = false
        for _, seat in ipairs(bus:GetDescendants()) do
            if (seat:IsA("Seat") or seat:IsA("VehicleSeat")) and seat.Name ~= "VehicleSeat" then
                if seat.Occupant == newTargetHumanoid then
                    playerSeated = true
                    break
                end
            end
        end
        if playerSeated then
            running = false
            if connection then connection:Disconnect() connection = nil end
            if flingConnection then flingConnection:Disconnect() flingConnection = nil end
            pcall(function()
                bus:PivotTo(CFrame.new(Vector3.new(-76.6, -401.97, -84.26)))
            end)
            task.wait(0.5)
            local args = { [1] = "DeleteAllVehicles" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
            end)
            if character then
                local myHRP = character:FindFirstChild("HumanoidRootPart")
                if myHRP and savedPosition then
                    pcall(function()
                        myHRP.Anchored = true
                        myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                        task.wait(0.2)
                        myHRP.Velocity = Vector3.zero
                        myHRP.RotVelocity = Vector3.zero
                        myHRP.Anchored = false
                        if humanoid then
                            humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                            humanoid.WalkSpeed = 16
                            humanoid.JumpPower = 50
                        end
                    end)
                end
            end
            if character then
                for _, part in ipairs(character:GetDescendants()) do
                    if part:IsA("BasePart") do
                        pcall(function()
                            part.CanCollide = true
                            part.Velocity = Vector3.zero
                            part.RotVelocity = Vector3.zero
                        end)
                    end
                end
            end
            if humanoid then
                pcall(function()
                    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
                    humanoid.WalkSpeed = 16
                    humanoid.JumpPower = 50
                end)
            end
            for _, seat in ipairs(Workspace:GetDescendants()) do
                if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
                    pcall(function() seat.Disabled = false end)
                end
            end
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clothe1s"):FireServer("CharacterSizeUp", 1)
            end)
        end
    end)
end

-- Função para fling com bola
local function flingWithBall(targetPlayer)
    if not targetPlayer or not targetPlayer.Character then return end
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then return end
    if not equipBola() then return end
    task.wait(0.5)
    local args = { [1] = "PlayerWantsToDeleteTool", [2] = "SoccerBall" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clea1rTool1s"):FireServer(unpack(args))
    end)
    local workspaceCom = Workspace:FindFirstChild("WorkspaceCom")
    if not workspaceCom then return end
    local soccerBalls = workspaceCom:FindFirstChild("001_SoccerBalls")
    if not soccerBalls then return end
    soccerBall = soccerBalls:FindFirstChild("Soccer" .. LocalPlayer.Name)
    if not soccerBall then return end
    originalProperties = {
        Anchored = soccerBall.Anchored,
        CanCollide = soccerBall.CanCollide,
        CanTouch = soccerBall.CanTouch
    }
    pcall(function()
        soccerBall.Anchored = false
        soccerBall.CanCollide = true
        soccerBall.CanTouch = true
    end)
    savedPosition = myHRP.Position
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            pcall(function() part.CanCollide = false end)
        end
    end
    if humanoid then
        pcall(function()
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
            humanoid.Sit = false
            humanoid.WalkSpeed = 16
            humanoid.JumpPower = 50
        end)
    end
    for _, seat in ipairs(Workspace:GetDescendants()) do
        if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
            pcall(function() seat.Disabled = true end)
        end
    end
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clothe1s"):FireServer("CharacterSizeDown", 4)
    end)
    running = true
    local lastFlingTime = 0
    connection = RunService.Heartbeat:Connect(function()
        if not running or not targetPlayer.Character then return end
        local hrp = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        local hum = targetPlayer.Character:FindFirstChild("Humanoid")
        local myHRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not hrp or not hum or not myHRP then return end
        local moveDir = hum.MoveDirection
        local isStill = moveDir.Magnitude < 0.1
        local isSitting = hum.Sit
        pcall(function()
            if isSitting then
                local y = math.sin(tick() * 50) * 2
                soccerBall.CFrame = CFrame.new(hrp.Position + Vector3.new(0, 0.75 + y, 0))
            elseif isStill then
                local z = math.sin(tick() * 50) * 3
                soccerBall.CFrame = CFrame.new(hrp.Position + Vector3.new(0, 0.75, z))
            else
                local offset = moveDir.Unit * math.clamp(hrp.Velocity.Magnitude * 0.15, 5, 12)
                soccerBall.CFrame = CFrame.new(hrp.Position + offset + Vector3.new(0, 0.75, 0))
            end
            myHRP.CFrame = CFrame.new(soccerBall.Position + Vector3.new(0, 1, 0))
        end)
    end)
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running or not targetPlayer.Character then return end
        local hrp = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
        local dist = soccerBall and (soccerBall.Position - hrp.Position).Magnitude or math.huge
        if dist < 4 and tick() - lastFlingTime > 0.4 then
            lastFlingTime = tick()
            for _, part in ipairs(targetPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    pcall(function() part.CanCollide = false end)
                end
            end
            local fling = Instance.new("BodyVelocity")
            fling.MaxForce = Vector3.new(1e9, 1e9, 1e9)
            fling.Velocity = Vector3.new(math.random(-3, 3), 1, math.random(-3, 3)).Unit * 12000 + Vector3.new(0, 12000, 0)
            fling.Parent = hrp
            task.delay(0.3, function()
                fling:Destroy()
                for _, part in ipairs(targetPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        pcall(function() part.CanCollide = true end)
                    end
                end
            end)
        end
    end)
end

-- Função para fling com sofá
local function flingWithSofa(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then return end
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then return end
    savedPosition = myHRP.Position
    if not equipSofa() then return end
    task.wait(0.5)
    couch = character:FindFirstChild("Couch")
    if not couch then
        for _, obj in ipairs(Workspace:GetDescendants()) do
            if (obj.Name == "Couch" or obj.Name == "Couch" .. LocalPlayer.Name) and (obj:IsA("BasePart") or obj:IsA("Tool")) then
                couch = obj
                break
            end
        end
    end
    if not couch then return end
    if couch:IsA("BasePart") then
        originalProperties = {
            Anchored = couch.Anchored,
            CanCollide = couch.CanCollide,
            CanTouch = couch.CanTouch
        }
        pcall(function()
            couch.Anchored = false
            couch.CanCollide = true
            couch.CanTouch = true
        end)
    end
    running = true
    connection = RunService.Stepped:Connect(function()
        if not running then return end
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                pcall(function() part.CanCollide = false end)
            end
        end
    end)
    local walkFlingInstance = nil
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running then return end
        local newTargetHRP = targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        local newTargetHumanoid = targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid")
        if not newTargetHRP or not newTargetHumanoid then
            running = false
            return
        end
        if not myHRP or not humanoid then
            running = false
            return
        end
        pcall(function()
            local targetPosition = newTargetHRP.Position
            character:SetPrimaryPartCFrame(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 4000),
                    math.rad(Workspace.DistributedGameTime * 5000),
                    math.rad(Workspace.DistributedGameTime * 6000)
                )
            )
        end)
        if newTargetHumanoid.Sit then
            running = false
            flingConnection:Disconnect()
            flingConnection = nil
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    pcall(function() part.CanCollide = false end)
                end
            end
            walkFlingInstance = Instance.new("BodyVelocity")
            walkFlingInstance.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            walkFlingInstance.Velocity = Vector3.new(math.random(-5, 5), 5, math.random(-5, 5)).Unit * 1000000 + Vector3.new(0, 1000000, 0)
            walkFlingInstance.Parent = myHRP
            pcall(function()
                myHRP.Anchored = true
                myHRP.CFrame = CFrame.new(Vector3.new(-59599.73, 2040070.50, -293391.16))
                myHRP.Anchored = false
            end)
            task.wait(0.5)
            local args = { [1] = "PlayerWantsToDeleteTool", [2] = "Couch" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clea1rTool1s"):FireServer(unpack(args))
            end)
            pcall(function()
                myHRP.Anchored = true
                myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                task.wait(0.2)
                myHRP.Velocity = Vector3.zero
                myHRP.RotVelocity = Vector3.zero
                myHRP.Anchored = false
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                    humanoid.WalkSpeed = 16
                    humanoid.JumpPower = 50
                end
            end)
            if walkFlingInstance then
                walkFlingInstance:Destroy()
                for _, part in ipairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        pcall(function() part.CanCollide = true end)
                    end
                end
            end
        end
    end)
end

-- Função para fling com ônibus
local function flingWithBus(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then return end
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then return end
    savedPosition = myHRP.Position
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1181.83, 76.08, -1158.83))
        task.wait(0.2)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end)
    task.wait(0.5)
    local args = { [1] = "DeleteAllVehicles" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    args = { [1] = "PickingCar", [2] = "SchoolBus" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    task.wait(2)
    local vehiclesFolder = Workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then return end
    local busName = LocalPlayer.Name .. "Car"
    local bus = vehiclesFolder:FindFirstChild(busName)
    if not bus then return end
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1171.15, 79.45, -1166.2))
        task.wait(0.2)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        humanoid:ChangeState(Enum.HumanoidStateType.Seated)
    end)
    local sitStart = tick()
    repeat
        task.wait()
        if tick() - sitStart > 10 then return end
    until humanoid.Sit
    running = true
    connection = RunService.Stepped:Connect(function()
        if not running then return end
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                pcall(function() part.CanCollide = false end)
            end
        end
    end)
    local walkFlingInstanceBus = nil
    local walkFlingInstancePlayer = nil
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running then return end
        local newTargetHRP = targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        local newTargetHumanoid = targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid")
        if not newTargetHRP or not newTargetHumanoid then
            running = false
            return
        end
        if not myHRP or not humanoid then
            running = false
            return
        end
        local offset = Vector3.new(math.random(-10, 10), 0, math.random(-10, 10))
        pcall(function()
            local targetPosition = newTargetHRP.Position + offset
            bus:PivotTo(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 4000),
                    math.rad(Workspace.DistributedGameTime * 5000),
                    math.rad(Workspace.DistributedGameTime * 6000)
                )
            )
        end)
        local playerSeated = false
        for _, seat in ipairs(bus:GetDescendants()) do
            if (seat:IsA("Seat") or seat:IsA("VehicleSeat")) and seat.Name ~= "VehicleSeat" then
                if seat.Occupant == newTargetHumanoid then
                    playerSeated = true
                    break
                end
            end
        end
        if playerSeated then
            running = false
            if connection then connection:Disconnect() connection = nil end
            if flingConnection then flingConnection:Disconnect() flingConnection = nil end
            pcall(function()
                bus:PivotTo(CFrame.new(Vector3.new(-76.6, -401.97, -84.26)))
            end)
            task.wait(0.5)
            local args = { [1] = "DeleteAllVehicles" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
            end)
            if character then
                local myHRP = character:FindFirstChild("HumanoidRootPart")
                if myHRP and savedPosition then
                    pcall(function()
                        myHRP.Anchored = true
                        myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                        task.wait(0.2)
                        myHRP.Velocity = Vector3.zero
                        myHRP.RotVelocity = Vector3.zero
                        myHRP.Anchored = false
                        if humanoid then
                            humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                            humanoid.WalkSpeed = 16
                            humanoid.JumpPower = 50
                        end
                    end)
                end
            end
            if character then
                for _, part in ipairs(character:GetDescendants()) do
                    if part:IsA("BasePart") do
                        pcall(function()
                            part.CanCollide = true
                            part.Velocity = Vector3.zero
                            part.RotVelocity = Vector3.zero
                        end)
                    end
                end
            end
            if humanoid then
                pcall(function()
                    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
                    humanoid.WalkSpeed = 16
                    humanoid.JumpPower = 50
                end)
            end
            for _, seat in ipairs(Workspace:GetDescendants()) do
                if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
                    pcall(function() seat.Disabled = false end)
                end
            end
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clothe1s"):FireServer("CharacterSizeUp", 1)
            end)
        end
    end)
end

-- Função para fling com barco
local function flingWithBoat(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then return end
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then return end
    savedPosition = myHRP.Position
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1181.83, 76.08, -1158.83))
        task.wait(0.2)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end)
    task.wait(0.5)
    local args = { [1] = "DeleteAllVehicles" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    args = { [1] = "PickingCar", [2] = "Boat" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    task.wait(2)
    local vehiclesFolder = Workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then return end
    local boatName = LocalPlayer.Name .. "Car"
    local boat = vehiclesFolder:FindFirstChild(boatName)
    if not boat then return end
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1171.15, 79.45, -1166.2))
        task.wait(0.2)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        humanoid:ChangeState(Enum.HumanoidStateType.Seated)
    end)
    local sitStart = tick()
    repeat
        task.wait()
        if tick() - sitStart > 10 then return end
    until humanoid.Sit
    running = true
    connection = RunService.Stepped:Connect(function()
        if not running then return end
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                pcall(function() part.CanCollide = false end)
            end
        end
    end)
    local lastUpdate = tick()
    local updateInterval = 0.15
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running then return end
        local targetCharacter = targetPlayer.Character
        local newTargetHRP = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")
        local newTargetHumanoid = targetCharacter and targetCharacter:FindFirstChild("Humanoid")
        if not newTargetHRP or not newTargetHumanoid then
            running = false
            return
        end
        if not myHRP or not humanoid then
            running = false
            return
        end
        if tick() - lastUpdate < updateInterval then return end
        lastUpdate = tick()
        local offset = Vector3.new(math.random(-10, 10), 0, math.random(-10, 10))
        pcall(function()
            local targetPosition = newTargetHRP.Position + offset
            boat:PivotTo(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 4000),
                    math.rad(Workspace.DistributedGameTime * 5000),
                    math.rad(Workspace.DistributedGameTime * 6000)
                )
            )
        end)
        local playerSeated = false
        for _, seat in ipairs(boat:GetDescendants()) do
            if (seat:IsA("Seat") or seat:IsA("VehicleSeat")) and seat.Name ~= "VehicleSeat" then
                if seat.Occupant == newTargetHumanoid then
                    playerSeated = true
                    break
                end
            end
        end
        if playerSeated then
            running = false
            if connection then connection:Disconnect() connection = nil end
            if flingConnection then flingConnection:Disconnect() flingConnection = nil end
            local walkFlingInstanceBoat = Instance.new("BodyVelocity")
            walkFlingInstanceBoat.MaxForce = Vector3.new(2e6, 2e6, 2e6)
            walkFlingInstanceBoat.Velocity = Vector3.new(math.random(-5, 5), 5, math.random(-5, 5)).Unit * 2000000 + Vector3.new(0, 2000000, 0)
            walkFlingInstanceBoat.Parent = newTargetHRP
            pcall(function()
                boat:PivotTo(CFrame.new(Vector3.new(-76.6, -401.97, -84.26)))
            end)
            task.wait(0.5)
            local args = { [1] = "DeleteAllVehicles" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
            end)
            task.delay(0.3, function()
                walkFlingInstanceBoat:Destroy()
                for _, part in ipairs(targetPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        pcall(function() part.CanCollide = true end)
                    end
                end
            end)
            if character then
                local myHRP = character:FindFirstChild("HumanoidRootPart")
                if myHRP and savedPosition then
                    pcall(function()
                        myHRP.Anchored = true
                        myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                        task.wait(0.2)
                        myHRP.Velocity = Vector3.zero
                        myHRP.RotVelocity = Vector3.zero
                        myHRP.Anchored = false
                        if humanoid then
                            humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                            humanoid.WalkSpeed = 16
                            humanoid.JumpPower = 50
                        end
                    end)
                end
            end
            if character then
                for _, part in ipairs(character:GetDescendants()) do
                    if part:IsA("BasePart") do
                        pcall(function()
                            part.CanCollide = true
                            part.Velocity = Vector3.zero
                            part.RotVelocity = Vector3.zero
                        end)
                    end
                end
            end
            if humanoid then
                pcall(function()
                    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
                    humanoid.WalkSpeed = 16
                    humanoid.JumpPower = 50
                end)
            end
            for _, seat in ipairs(Workspace:GetDescendants()) do
                if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
                    pcall(function() seat.Disabled = false end)
                end
            end
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clothe1s"):FireServer("CharacterSizeUp", 1)
            end)
        end
    end)
end

-- Botão para iniciar matar
pcall(function()
    Tab1:Button({
        Title = "Matar",
        Description = "Inicia o matar com o método selecionado",
        Callback = function()
            if isFollowingKill or isFollowingPull or running then return end
            if not selectedPlayer or not selectedKillPullMethod then return end
            if selectedKillPullMethod == "Sofá" then
                killWithSofa(selectedPlayer)
            elseif selectedKillPullMethod == "Ônibus" then
                killWithBus(selectedPlayer)
            end
        end
    })
end)

-- Botão para iniciar puxar
pcall(function()
    Tab1:Button({
        Title = "Puxar",
        Description = "Inicia o puxar com o método selecionado",
        Callback = function()
            if isFollowingKill or isFollowingPull or running then return end
            if not selectedPlayer or not selectedKillPullMethod then return end
            if selectedKillPullMethod == "Sofá" then
                pullWithSofa(selectedPlayer)
            end
        end
    })
end)

-- Lógica de acompanhamento para matar/puxar
local followConnection
if followConnection then followConnection:Disconnect() end
followConnection = RunService.Heartbeat:Connect(function()
    if (isFollowingKill or isFollowingPull) and selectedPlayer and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
        pcall(function()
            local targetPosition = selectedPlayer.Character.HumanoidRootPart.Position
            LocalPlayer.Character:SetPrimaryPartCFrame(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 4000),
                    math.rad(Workspace.DistributedGameTime * 5000),
                    math.rad(Workspace.DistributedGameTime * 6000)
                )
            )
        end)
    end
end)

local sitCheckConnection
if sitCheckConnection then sitCheckConnection:Disconnect() end
sitCheckConnection = RunService.Heartbeat:Connect(function()
    if (isFollowingKill or isFollowingPull) and selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("Humanoid") then curricular
        pcall(function()
            if selectedPlayer.Character.Humanoid.Sit then
                if isFollowingKill then
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(0, -500, 0))
                        task.wait(0.5)
                        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Too1l"):InvokeServer("PickingTools", "Couch")
                        task.wait(1)
                    end
                end
                isFollowingKill = false
                isFollowingPull = false
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and originalPosition then
                    local myHRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    local myHumanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                    if myHRP then
                        pcall(function()
                            myHRP.Anchored = true
                            myHRP.CFrame = CFrame.new(originalPosition + Vector3.new(0, 5, 0))
                            task.wait(0.2)
                            myHRP.Velocity = Vector3.zero
                            myHRP.RotVelocity = Vector3.zero
                            myHRP.Anchored = false
                            if myHumanoid then
                                myHumanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                                myHumanoid.WalkSpeed = 16
                                myHumanoid.JumpPower = 50
                            end
                        end)
                    end
                    originalPosition = nil
                end
            end
        end)
    end
end)

-- Botão para parar matar ou puxar
pcall(function()
    Tab1:Button({
        Title = "Parar (Matar/Puxar)",
        Description = "Para o movimento de matar ou puxar",
        Callback = function()
            isFollowingKill = false
            isFollowingPull = false
            local character = LocalPlayer.Character
            if character then
                for _, part in ipairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        pcall(function()
                            part.CanCollide = true
                            part.Velocity = Vector3.zero
                            part.RotVelocity = Vector3.zero
                        end)
                    end
                end
            end
            local myHumanoid = character and character:FindFirstChild("Humanoid")
            if myHumanoid then
                pcall(function()
                    myHumanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
                    myHumanoid.WalkSpeed = 16
                    myHumanoid.JumpPower = 50
                end)
            end
            for _, seat in ipairs(Workspace:GetDescendants()) do
                if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
                    pcall(function() seat.Disabled = false end)
                end
            end
            if originalPosition then
                local myHRP = character and character:FindFirstChild("HumanoidRootPart")
                if myHRP then
                    pcall(function()
                        myHRP.Anchored = true
                        myHRP.CFrame = CFrame.new(originalPosition + Vector3.new(0, 5, 0))
                        task.wait(0.2)
                        myHRP.Velocity = Vector3.zero
                        myHRP.RotVelocity = Vector3.zero
                        myHRP.Anchored = false
                        if myHumanoid then
                            myHumanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                        end
                    end)
                end
                originalPosition = nil
            end
            local args = { [1] = "DeleteAllVehicles" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
            end)
        end
    })
end)

-- Botão para iniciar fling
pcall(function()
    Tab1:Button({
        Title = "Iniciar Fling",
        Description = "Inicia o fling com o método selecionado",
        Callback = function()
            if isFollowingKill or isFollowingPull or running then return end
            if not selectedPlayer or not selectedFlingMethod then return end
            if selectedFlingMethod == "Sofá" then
                flingWithSofa(selectedPlayer)
            elseif selectedFlingMethod == "Ônibus" then
                flingWithBus(selectedPlayer)
            elseif selectedFlingMethod == "Bola" then
                flingWithBall(selectedPlayer)
            elseif selectedFlingMethod == "Barco" then
                flingWithBoat(selectedPlayer)
            end
        end
    })
end)

-- Botão para parar fling
pcall(function()
    Tab1:Button({
        Title = "Parar Fling",
        Description = "Para o fling no jogador selecionado",
        Callback = function()
            running = false
            if connection then connection:Disconnect() connection = nil end
            if flingConnection then flingConnection:Disconnect() flingConnection = nil end
            local character = LocalPlayer.Character
            if character then
                for _, part in ipairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        pcall(function()
                            part.CanCollide = true
                            part.Velocity = Vector3.zero
                            part.RotVelocity = Vector3.zero
                        end)
                    end
                end
            end
            local myHumanoid = character and character:FindFirstChild("Humanoid")
            if myHumanoid then
                pcall(function()
                    myHumanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
                    myHumanoid.WalkSpeed = 16
                    myHumanoid.JumpPower = 50
                end)
            end
            for _, seat in ipairs(Workspace:GetDescendants()) do
                if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
                    pcall(function() seat.Disabled = false end)
                end
            end
            if couch and originalProperties then
                pcall(function()
                    couch.Anchored = originalProperties.Anchored
                    couch.CanCollide = originalProperties.CanCollide
                    couch.CanTouch = originalProperties.CanTouch
                end)
                couch = nil
                originalProperties = {}
            end
            if soccerBall and originalProperties then
                pcall(function()
                    soccerBall.Anchored = originalProperties.Anchored
                    soccerBall.CanCollide = originalProperties.CanCollide
                    soccerBall.CanTouch = originalProperties.CanTouch
                end)
                soccerBall = nil
                originalProperties = {}
            end
            if savedPosition then
                local myHRP = character and character:FindFirstChild("HumanoidRootPart")
                if myHRP then
                    pcall(function()
                        myHRP.Anchored = true
                        myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                        task.wait(0.2)
                        myHRP.Velocity = Vector3.zero
                        myHRP.RotVelocity = Vector3.zero
                        myHRP.Anchored = false
                        if myHumanoid then
                            myHumanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                        end
                    end)
                end
                savedPosition = nil
            end
            local args = { [1] = "DeleteAllVehicles" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
            end)
            args = { [1] = "PlayerWantsToDeleteTool", [2] = "Couch" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clea1rTool1s"):FireServer(unpack(args))
            end)
            args = { [1] = "PlayerWantsToDeleteTool", [2] = "SoccerBall" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clea1rTool1s"):FireServer(unpack(args))
            end)
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clothe1s"):FireServer("CharacterSizeUp", 1)
            end)
        end
    })
end)
