--lolyta hub para teste


-- === Configura√ß√µes Iniciais === --
local AllowedUsers = {
    "rtrt967",
    "kaio_lg1",
    "Higor_hg5",
    "QUEROBOVO",
    "guga_10plays",
    "pzinrlk929",
    "Tataizin_021",
    "Lolytateste666",
    "rafainha4002",
    "Tiago_RJ4",
    "lacradoor123",
    "enzin12346BR",
    "RED_MIGZINN",
}

-- Servi√ßos do Roblox
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

-- Verifica√ß√£o de permiss√£o do jogador
local LocalPlayer = Players.LocalPlayer
local PlayerName = LocalPlayer.Name
local isAllowed = false

for _, user in pairs(AllowedUsers) do
    if user == PlayerName then
        isAllowed = true
        break
    end
end

if not isAllowed then
    game.StarterGui:SetCore("SendNotification", {
        Title = "Acesso Negado",
        Text = "Voc√™ n√£o tem permiss√£o para usar o Lolyta Hub 3.1 Contate o criador para ser adicionado √† lista.",
        Duration = 5
    })
    return
end

-- Tela de carregamento com imagem funcional e texto "Carregando..."
local imageId = "rbxassetid://76308195683050" -- ‚úÖ imagem testada e garantida funcional

-- Remove GUI antiga se j√° existir
local oldGui = game.CoreGui:FindFirstChild("LoadingScreen")
if oldGui then oldGui:Destroy() end

-- Cria a nova tela
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "LoadingScreen"
screenGui.IgnoreGuiInset = true
screenGui.ResetOnSpawn = false
if syn and typeof(syn.protect_gui) == "function" then
    pcall(function() syn.protect_gui(screenGui) end)
end
screenGui.Parent = game:GetService("CoreGui")

-- Imagem no centro da tela
local imageLabel = Instance.new("ImageLabel")
imageLabel.Size = UDim2.new(0, 300, 0, 300)
imageLabel.Position = UDim2.new(0.5, -150, 0.5, -150)
imageLabel.BackgroundTransparency = 1
imageLabel.Image = imageId
imageLabel.Parent = screenGui

-- Texto "Carregando..."
local textLabel = Instance.new("TextLabel")
textLabel.Size = UDim2.new(0, 300, 0, 50)
textLabel.Position = UDim2.new(0.5, -150, 0.5, 180)
textLabel.BackgroundTransparency = 1
textLabel.Text = "Carregando..."
textLabel.TextColor3 = Color3.new(1, 1, 1)
textLabel.TextStrokeTransparency = 0
textLabel.Font = Enum.Font.FredokaOne
textLabel.TextScaled = true
textLabel.Parent = screenGui

-- Fun√ß√£o que carrega o hub e os scripts ap√≥s a tela de carregamento
local function loadHub()
    local RE = ReplicatedStorage:FindFirstChild("RE")
    if not RE then
        warn("Erro: ReplicatedStorage.RE n√£o encontrado!")
        return
    end

    local function fireServer(eventName, args)
        local event = RE:FindFirstChild(eventName)
        if event then
            pcall(function()
                event:FireServer(unpack(args))
            end)
        else
            warn("Erro: Evento remoto " .. eventName .. " n√£o encontrado!")
        end
    end

    -- Define o nome "Lolyta Hub üíñ" com cor rosa escuro
    local argsName = {
        [1] = "RolePlayName",
        [2] = "Lolyta Hub üíñ"
    }
    fireServer("RolePlayNameText", argsName)

    -- Define a cor do nome como rosa escuro
    local argsNameColor = {
        [1] = "PickingRPNameColor",
        [2] = Color3.new(0.8, 0.2, 0.4)
    }
    fireServer("RolePlayNameColor", argsNameColor)

    -- Define a bio "scripter" com cor preta
    local argsBio = {
        [1] = "RolePlayBio",
        [2] = "scripter"
    }
    fireServer("RolePlayBioText", argsBio)

    -- Define a cor da bio como preta
    local argsBioColor = {
        [1] = "PickingRPBioColor",
        [2] = Color3.new(0, 0, 0)
    }
    fireServer("RolePlayBioColor", argsBioColor)
end

-- Executa a fun√ß√£o de carregamento
loadHub()

-- Remove a tela de carregamento ap√≥s 3 segundos
task.wait(3)
screenGui:Destroy()

-- === Inicializa√ß√£o da Interface === --
 local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()
    local Version = "1.4.0"

local Window = WindUI:CreateWindow({
    Title = "hhygytttyggr",
    Icon = "door-open",
    Author = "Lolycon666",
    Folder = "Lolyta hub v.1.666",
    Size = UDim2.fromOffset(580, 460),
    KeySystem = {
        Key = "666",
        Note = "pode nao man",
        URL = "",
        SaveKey = true,
    },
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 200,
    HasOutline = false,
})

Window:EditOpenButton({
    Title = "Lolyta",
    Icon = "align-justify",
    CornerRadius = UDim.new(0, 10),
    StrokeThickness = 3,
    Color = ColorSequence.new(Color3.fromHex("FF0F7B"), Color3.fromHex("F89B29"))
})


-- === Abas da Interface === --
local Tab1 = Window:Tab({ Title = "Main", Icon = "house-plus" })
local Tab2 = Window:Tab({ Title = "Casa", Icon = "house" })
local Tab3 = Window:Tab({ Title = "Carro", Icon = "car" })
local Tab4 = Window:Tab({ Title = "RGB Color", Icon = "palette" })
local Tab5 = Window:Tab({ Title = "Troll Musica", Icon = "music" })
local Tab6 = Window:Tab({ Title = "Music All", Icon = "audio-lines" })
local Tab7 = Window:Tab({ Title = "Scripts", Icon = "layers" })
local Tab8 = Window:Tab({ Title = "Jogadores", Icon = "users" })
local Tab9 = Window:Tab({ Title = "Teleportes", Icon = "map-pin" })
local Tab10 = Window:Tab({ Title = "Troll", Icon = "skull" })


-- Servi√ßos
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- Vari√°veis compartilhadas
local selectedPlayer = nil
local isFollowingKill = false
local isFollowingPull = false
local running = false
local connection = nil
local flingConnection = nil
local originalPosition = nil
local savedPosition = nil
local originalProperties = {}
local selectedKillPullMethod = nil
local selectedFlingMethod = nil
local soccerBall = nil
local couch = nil
local isSpectating = false
local spectatedPlayer = nil
local characterConnection = nil
local flingToggle = nil
local touchedConnections = {}

-- Cria um RemoteEvent para comunica√ß√£o com o servidor
local SetNetworkOwnerEvent = Instance.new("RemoteEvent")
SetNetworkOwnerEvent.Name = "SetNetworkOwnerEvent_" .. tostring(math.random(1000, 9999))
SetNetworkOwnerEvent.Parent = ReplicatedStorage

-- Cria um script no servidor para lidar com o RemoteEvent
local serverScriptCode = [[
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local event = ReplicatedStorage:WaitForChild("]] .. SetNetworkOwnerEvent.Name .. [[")
    
    event.OnServerEvent:Connect(function(player, part, networkOwner)
        if part and part:IsA("BasePart") then
            pcall(function()
                part:SetNetworkOwner(networkOwner)
                part.Anchored = false
                part.CanCollide = true
                part.CanTouch = true
            end)
        end
    end)
]]

local success, errorMessage = pcall(function()
    loadstring(serverScriptCode)()
end)
if not success then
    print("Erro ao criar script no servidor: " .. tostring(errorMessage))
end

-- Fun√ß√£o para desativar temporariamente o CarClient
local function disableCarClient()
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local carClient = backpack:FindFirstChild("CarClient")
    if not carClient then
        local startTime = tick()
        repeat
            carClient = backpack:FindFirstChild("CarClient")
            task.wait()
        until carClient or (tick() - startTime > 5)
    end
    if carClient and carClient:IsA("LocalScript") then
        carClient.Disabled = true
        print("CarClient desativado.")
    else
        print("CarClient n√£o encontrado ap√≥s espera. Prosseguindo sem desativar.")
    end
end

-- Fun√ß√£o para reativar o CarClient
local function enableCarClient()
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local carClient = backpack:FindFirstChild("CarClient")
    if not carClient then
        local startTime = tick()
        repeat
            carClient = backpack:FindFirstChild("CarClient")
            task.wait()
        until carClient or (tick() - startTime > 5)
    end
    if carClient and carClient:IsA("LocalScript") then
        carClient.Disabled = false
        print("CarClient reativado.")
    else
        print("CarClient n√£o encontrado ap√≥s espera. Prosseguindo sem reativar.")
    end
end

-- Fun√ß√£o para obter os nomes dos jogadores, excluindo o jogador local
local function getPlayerNames()
    local playerNames = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playerNames, player.Name)
        end
    end
    return playerNames
end

-- Fun√ß√£o para atualizar o dropdown
local function updateDropdown(dropdown)
    local success, errorMessage = pcall(function()
        local playerNames = getPlayerNames()
        dropdown.Values = {}
        dropdown.Value = ""
        dropdown.Values = playerNames
        dropdown:Update()
        if selectedPlayer and not table.find(playerNames, selectedPlayer.Name) then
            dropdown.Value = ""
            selectedPlayer = nil
            if isSpectating then
                stopSpectating()
            end
        end
    end)
    if not success then
        print("Erro ao atualizar dropdown: " .. tostring(errorMessage))
    end
end

-- Fun√ß√£o para visualizar um jogador
local function spectatePlayer(playerName)
    if characterConnection then
        characterConnection:Disconnect()
        characterConnection = nil
    end

    local targetPlayer = Players:FindFirstChild(playerName)
    if targetPlayer and targetPlayer ~= LocalPlayer then
        spectatedPlayer = targetPlayer
        isSpectating = true

        local function updateCamera()
            if not isSpectating or not spectatedPlayer then
                return
            end
            if spectatedPlayer.Character and spectatedPlayer.Character:FindFirstChild("Humanoid") then
                Workspace.CurrentCamera.CameraSubject = spectatedPlayer.Character.Humanoid
            else
                Workspace.CurrentCamera.CameraSubject = nil
            end
        end

        updateCamera()

        characterConnection = RunService.Heartbeat:Connect(function()
            if not isSpectating then
                characterConnection:Disconnect()
                characterConnection = nil
                return
            end
            local success, errorMessage = pcall(updateCamera)
            if not success then
                print("Erro ao atualizar c√¢mera no modo visualiza√ß√£o: " .. tostring(errorMessage))
                stopSpectating()
            end
        end)

        spectatedPlayer.CharacterAdded:Connect(function()
            if isSpectating then
                updateCamera()
            end
        end)
    else
        isSpectating = false
        spectatedPlayer = nil
    end
end

-- Fun√ß√£o para parar de visualizar
local function stopSpectating()
    if characterConnection then
        characterConnection:Disconnect()
        characterConnection = nil
    end

    isSpectating = false
    spectatedPlayer = nil

    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        Workspace.CurrentCamera.CameraSubject = LocalPlayer.Character.Humanoid
        Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
    else
        Workspace.CurrentCamera.CameraSubject = nil
        Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
    end
end

-- Detecta quando o jogador local morre e reseta a c√¢mera
LocalPlayer.CharacterAdded:Connect(function(character)
    if isSpectating then
        stopSpectating()
    end
end)

-- Dropdown para selecionar jogador
print("Criando o dropdown para selecionar jogador...")
local DropdownPlayer = Tab10:Dropdown({
    Title = "Selecionar Jogador",
    Desc = "Escolha um jogador para matar, puxar, visualizar ou aplicar fling",
    Value = "",
    Multi = false,
    AllowNone = true,
    Values = getPlayerNames(),
    Callback = function(selectedPlayerName)
        if selectedPlayerName == "" or selectedPlayerName == nil then
            selectedPlayer = nil
            if running or isFollowingKill or isFollowingPull then
                running = false
                isFollowingKill = false
                isFollowingPull = false
                if connection then connection:Disconnect() end
                if flingConnection then flingConnection:Disconnect() end
                if flingToggle then flingToggle:SetValue(false) end
            end
            if isSpectating then
                stopSpectating()
            end
        else
            selectedPlayer = Players:FindFirstChild(selectedPlayerName)
            if isSpectating then
                stopSpectating()
                spectatePlayer(selectedPlayerName)
            end
        end
    end
})
print("Dropdown para selecionar jogador criado com sucesso!")

-- Bot√£o para atualizar a lista de jogadores
print("Criando o bot√£o para atualizar a lista de jogadores...")
Tab10:Button({
    Title = "Atualizar Lista de Jogadores",
    Desc = "Atualiza a lista de jogadores no dropdown",
    Callback = function()
        updateDropdown(DropdownPlayer)
    end
})
print("Bot√£o para atualizar a lista de jogadores criado com sucesso!")

-- Toggle para visualizar jogador
print("Criando o toggle para visualizar jogador...")
local SpectateToggle = Tab10:Toggle({
    Title = "Visualizar Jogador",
    Desc = "Ativa/desativa a visualiza√ß√£o do jogador selecionado",
    Default = false,
    Callback = function(state)
        if state then
            if selectedPlayer then
                local success, errorMessage = pcall(spectatePlayer, selectedPlayer.Name)
                if not success then
                    print("Erro ao ativar modo visualiza√ß√£o: " .. tostring(errorMessage))
                    SpectateToggle:SetValue(false)
                end
            else
                print("Selecione um jogador antes de ativar a visualiza√ß√£o.")
                SpectateToggle:SetValue(false)
            end
        else
            local success, errorMessage = pcall(stopSpectating)
            if not success then
                print("Erro ao desativar modo visualiza√ß√£o: " .. tostring(errorMessage))
            end
        end
    end
})
print("Toggle para visualizar jogador criado com sucesso!")

-- Remove jogadores que saem do servidor
Players.PlayerRemoving:Connect(function(player)
    if selectedPlayer == player then
        selectedPlayer = nil
        if isSpectating then
            stopSpectating()
        end
        if running then
            running = false
            if connection then connection:Disconnect() connection = nil end
            if flingConnection then flingConnection:Disconnect() flingConnection = nil end
            if flingToggle then flingToggle:SetValue(false) end
        end
    end
    updateDropdown(DropdownPlayer)
end)

-- Inicializa o dropdown
updateDropdown(DropdownPlayer)

-- Dropdown para selecionar m√©todo de matar/puxar
print("Criando o dropdown para selecionar m√©todo de matar/puxar...")
local DropdownKillPullMethod = Tab10:Dropdown({
    Title = "Selecionar M√©todo (Matar/Puxar)",
    Desc = "Escolha o m√©todo para matar ou puxar",
    Values = {"Sof√°", "√înibus"},
    Callback = function(value)
        selectedKillPullMethod = value
    end
})
print("Dropdown para selecionar m√©todo de matar/puxar criado com sucesso!")

-- Fun√ß√£o para equipar o sof√°
local function equipSofa()
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local sofa = backpack:FindFirstChild("Couch") or LocalPlayer.Character:FindFirstChild("Couch")
    if not sofa then
        local args = { [1] = "PickingTools", [2] = "Couch" }
        local success, err = pcall(function()
            ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Too1l"):InvokeServer(unpack(args))
        end)
        if not success then
            print("Erro ao pegar o sof√°: " .. tostring(err))
            return false
        end
        repeat
            sofa = backpack:FindFirstChild("Couch")
            task.wait()
        until sofa or task.wait(5)
        if not sofa then
            print("Falha ao pegar o sof√°!")
            return false
        end
    end
    if sofa.Parent ~= LocalPlayer.Character then
        sofa.Parent = LocalPlayer.Character
    end
    return true
end

-- Fun√ß√£o para matar com sof√°
local function killWithSofa(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then
        print("Selecione um jogador v√°lido antes de iniciar!")
        return
    end
    if not equipSofa() then return end
    isFollowingKill = true
    originalPosition = LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position
end

-- Fun√ß√£o para puxar com sof√°
local function pullWithSofa(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then
        print("Selecione um jogador v√°lido antes de iniciar!")
        return
    end
    if not equipSofa() then return end
    isFollowingPull = true
    originalPosition = LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position
end

-- Fun√ß√£o para matar com √¥nibus (usando Body)
local function killWithBus(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then 
        print("Selecione um jogador v√°lido antes de iniciar!")
        return 
    end
    local character = LocalPlayer.Character
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then 
        print("Seu personagem ainda n√£o est√° totalmente carregado.")
        return 
    end
    savedPosition = myHRP.Position
    
    disableCarClient()
    
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1181.83, 76.08, -1158.83))
        task.wait(0.1)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
        end
    end)
    task.wait(0.2)
    
    local args = { [1] = "DeleteAllVehicles" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer [1] = "DeleteAllVehicles" })
    end)
    
    args = { [1] = "PickingCar", [2] = "SchoolBus" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    task.wait(0.5)
    
    local vehiclesFolder = Workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then 
        print("Pasta Vehicles n√£o encontrada no Workspace!")
        enableCarClient()
        return 
    end
    local busName = LocalPlayer.Name .. "Car"
    local bus = vehiclesFolder:WaitForChild(busName, 3)
    if not bus then 
        print("√înibus n√£o encontrado em Workspace.Vehicles com o nome: " .. busName)
        enableCarClient()
        return 
    end
    
    local busBody = bus:FindFirstChild("Body")
    if not busBody then 
        print("Parte 'Body' n√£o encontrada no √¥nibus! Verifique a estrutura do modelo.")
        enableCarClient()
        return 
    end
    
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1171.71, 79.12, -1166.68))
        task.wait(0.1)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        humanoid:ChangeState(Enum.HumanoidStateType.Seated)
    end)
    
    local sitStart = tick()
    repeat
        task.wait()
        if tick() - sitStart > 5 then 
            print("Timeout: Jogador local n√£o foi detectado como sentado!")
            enableCarClient()
            return 
        end
    until humanoid.Sit
    
    for _, part in ipairs(bus:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
            pcall(function() part:SetNetworkOwner(nil) end)
        end
    end
    running = true
    connection = RunService.Stepped:Connect(function()
        if not running then return end
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end)
    local lastUpdate = tick()
    local updateInterval = 0.05
    local startTime = tick()
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running then return end
        local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
        local newTargetHRP = targetCharacter:FindFirstChild("HumanoidRootPart")
        local newTargetHumanoid = targetCharacter:FindFirstChild("Humanoid")
        if not newTargetHRP or not newTargetHumanoid then 
            running = false
            return 
        end
        if not myHRP or not humanoid then
            running = false
            return
        end
        if tick() - lastUpdate < updateInterval then return end
        lastUpdate = tick()
        local offset = Vector3.new(math.random(-10, 10), 0, math.random(-10, 10))
        pcall(function()
            local targetPosition = newTargetHRP.Position + offset
            bus:PivotTo(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 12000),
                    math.rad(Workspace.DistributedGameTime * 15000),
                    math.rad(Workspace.DistributedGameTime * 18000)
                )
            )
        end)
        local playerSeated = false
        for _, seat in ipairs(bus:GetDescendants()) do
            if (seat:IsA("Seat") or seat:IsA("VehicleSeat")) and seat.Name ~= "VehicleSeat" then
                if seat.Occupant == newTargetHumanoid then
                    playerSeated = true
                    break
                end
            end
        end
        if playerSeated or tick() - startTime > 10 then
            running = false
            if connection then connection:Disconnect() connection = nil end
            if flingConnection then flingConnection:Disconnect() flingConnection = nil end
            pcall(function()
                bus:PivotTo(CFrame.new(Vector3.new(-76.6, -401.97, -84.26)))
            end)
            task.wait(0.2)
            
            local args = { [1] = "DeleteAllVehicles" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
            end)
            
            if character then
                local myHRP = character:FindFirstChild("HumanoidRootPart")
                if myHRP and savedPosition then
                    pcall(function()
                        myHRP.Anchored = true
                        myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                        task.wait(0.1)
                        myHRP.Velocity = Vector3.zero
                        myHRP.RotVelocity = Vector3.zero
                        myHRP.Anchored = false
                        if humanoid then
                            humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                        end
                    end)
                end
            end
            if character then
                for _, part in ipairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                        part.Velocity = Vector3.zero
                        part.RotVelocity = Vector3.zero
                    end
                end
            end
            local myHumanoid = character and character:FindFirstChild("Humanoid")
            if myHumanoid then
                myHumanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
            end
            for _, seat in ipairs(Workspace:GetDescendants()) do
                if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
                    seat.Disabled = false
                end
            end
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clothe1s"):FireServer("CharacterSizeUp", 1)
            end)
            
            enableCarClient()
        end
    end)
end

-- L√≥gica de matar e puxar
local followConnection
if followConnection then followConnection:Disconnect() end
followConnection = RunService.Heartbeat:Connect(function()
    if (isFollowingKill or isFollowingPull) and selectedPlayer and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local success, errorMessage = pcall(function()
            local targetPosition = selectedPlayer.Character.HumanoidRootPart.Position
            LocalPlayer.Character:SetPrimaryPartCFrame(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 12000),
                    math.rad(Workspace.DistributedGameTime * 15000),
                    math.rad(Workspace.DistributedGameTime * 18000)
                )
            )
        end)
        if not success then
            print("Erro no loop de matar/puxar: " .. tostring(errorMessage))
            isFollowingKill = false
            isFollowingPull = false
        end
    end
end)

local sitCheckConnection
if sitCheckConnection then sitCheckConnection:Disconnect() end
sitCheckConnection = RunService.Heartbeat:Connect(function()
    if (isFollowingKill or isFollowingPull) and selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("Humanoid") then
        local success, errorMessage = pcall(function()
            if selectedPlayer.Character.Humanoid.Sit then
                if isFollowingKill then
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(0, -500, 0))
                        task.wait(0.5)
                        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Too1l"):InvokeServer("PickingTools", "Couch")
                        task.wait(1)
                    end
                end
                isFollowingKill = false
                isFollowingPull = false
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and originalPosition then
                    local myHRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    local myHumanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                    if myHRP then
                        myHRP.Anchored = true
                        myHRP.CFrame = CFrame.new(originalPosition + Vector3.new(0, 5, 0))
                        task.wait(0.1)
                        myHRP.Velocity = Vector3.zero
                        myHRP.RotVelocity = Vector3.zero
                        myHRP.Anchored = false
                        if myHumanoid then
                            myHumanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                        end
                    end
                    originalPosition = nil
                end
            end
        end)
        if not success then
            print("Erro na verifica√ß√£o de assento: " .. tostring(errorMessage))
            isFollowingKill = false
            isFollowingPull = false
        end
    end
end)

-- Bot√£o para iniciar matar
print("Criando o bot√£o para iniciar matar...")
Tab10:Button({
    Title = "Matar",
    Desc = "Inicia o matar com o m√©todo selecionado",
    Callback = function()
        if isFollowingKill or isFollowingPull or running then
            print("Uma a√ß√£o j√° est√° ativa. Use o bot√£o Parar primeiro.")
            return
        end
        if not selectedPlayer then
            print("Nenhum jogador selecionado!")
            return
        end
        if not selectedKillPullMethod then
            print("Nenhum m√©todo de matar/puxar selecionado!")
            return
        end
        if selectedKillPullMethod == "Sof√°" then
            killWithSofa(selectedPlayer)
        elseif selectedKillPullMethod == "√înibus" then
            killWithBus(selectedPlayer)
        end
    end
})
print("Bot√£o para iniciar matar criado com sucesso!")

-- Bot√£o para iniciar puxar
print("Criando o bot√£o para iniciar puxar...")
Tab10:Button({
    Title = "Puxar",
    Desc = "Inicia o puxar com o m√©todo selecionado",
    Callback = function()
        if isFollowingKill or isFollowingPull or running then
            print("Uma a√ß√£o j√° est√° ativa. Use o bot√£o Parar primeiro.")
            return
        end
        if not selectedPlayer then
            print("Nenhum jogador selecionado!")
            return
        end
        if not selectedKillPullMethod then
            print("Nenhum m√©todo de matar/puxar selecionado!")
            return
        end
        if selectedKillPullMethod == "Sof√°" then
            pullWithSofa(selectedPlayer)
        else
            print("Puxar s√≥ funciona com Sof√°!")
        end
    end
})
print("Bot√£o para iniciar puxar criado com sucesso!")

-- Bot√£o para parar matar ou puxar
print("Criando o bot√£o para parar matar ou puxar...")
Tab10:Button({
    Title = "Parar (Matar ou Puxar)",
    Desc = "Para o movimento de matar ou puxar",
    Callback = function()
        isFollowingKill = false
        isFollowingPull = false
        for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
                part.Velocity = Vector3.zero
                part.RotVelocity = Vector3.zero
            end
        end
        local myHumanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
        if myHumanoid then
            myHumanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
        end
        for _, seat in ipairs(Workspace:GetDescendants()) do
            if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
                seat.Disabled = false
            end
        end
        if originalPosition then
            local myHRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if myHRP then
                myHRP.Anchored = true
                myHRP.CFrame = CFrame.new(originalPosition + Vector3.new(0, 5, 0))
                task.wait(0.1)
                myHRP.Velocity = Vector3.zero
                myHRP.RotVelocity = Vector3.zero
                myHRP.Anchored = false
                if myHumanoid then
                    myHumanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                end
            end
            originalPosition = nil
        end
        
        disableCarClient()
        
        local args = { [1] = "DeleteAllVehicles" }
        pcall(function()
            ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
        end)
        task.wait(0.2)
        enableCarClient()
    end
})
print("Bot√£o para parar matar ou puxar criado com sucesso!")

-- Dropdown para selecionar m√©todo de fling
print("Criando o dropdown para selecionar m√©todo de fling...")
local DropdownFlingMethod = Tab10:Dropdown({
    Title = "Selecionar M√©todo de Fling",
    Desc = "Escolha o m√©todo para aplicar fling",
    Values = {"Sof√°", "√înibus", "Bola", "Barco"},
    Callback = function(value)
        selectedFlingMethod = value
    end
})
print("Dropdown para selecionar m√©todo de fling criado com sucesso!")

-- Fun√ß√£o para equipar a bola
local function equipBola()
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local bola = backpack:FindFirstChild("SoccerBall") or LocalPlayer.Character:FindFirstChild("SoccerBall")
    if not bola then
        local args = { [1] = "PickingTools", [2] = "SoccerBall" }
        local success, err = pcall(function()
            ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Too1l"):InvokeServer(unpack(args))
        end)
        if not success then
            print("Erro ao pegar a bola: " .. tostring(err))
            return false
        end
        repeat
            bola = backpack:FindFirstChild("SoccerBall")
            task.wait()
        until bola or task.wait(5)
        if not bola then
            print("Falha ao pegar a bola!")
            return false
        end
    end
    if bola.Parent ~= LocalPlayer.Character then
        bola.Parent = LocalPlayer.Character
    end
    return true
end

-- Fun√ß√£o para fling com bola
local function flingWithBall(targetPlayer)
    if not targetPlayer or not targetPlayer.Character then
        print("Selecione um jogador v√°lido antes de iniciar o fling!")
        return
    end
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then
        print("Seu personagem ainda n√£o est√° totalmente carregado.")
        return
    end
    if not equipBola() then return end
    task.wait(0.2)
    local args = { [1] = "PlayerWantsToDeleteTool", [2] = "SoccerBall" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clea1rTool1s"):FireServer(unpack(args))
    end)
    local workspaceCom = Workspace:FindFirstChild("WorkspaceCom")
    if not workspaceCom then
        print("WorkspaceCom n√£o encontrado!")
        return
    end
    local soccerBalls = workspaceCom:FindFirstChild("001_SoccerBalls")
    if not soccerBalls then
        print("001_SoccerBalls n√£o encontrado!")
        return
    end
    soccerBall = soccerBalls:FindFirstChild("Soccer" .. LocalPlayer.Name)
    if not soccerBall then
        print("Bola de futebol n√£o encontrada em Workspace.WorkspaceCom.001_SoccerBalls.Soccer" .. LocalPlayer.Name)
        return
    end
    originalProperties = {
        Anchored = soccerBall.Anchored,
        CanCollide = soccerBall.CanCollide,
        CanTouch = soccerBall.CanTouch
    }
    soccerBall.Anchored = false
    soccerBall.CanCollide = true
    soccerBall.CanTouch = true
    pcall(function() soccerBall:SetNetworkOwner(nil) end)
    savedPosition = myHRP.Position
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
        end
    end
    if humanoid then
        humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
        humanoid.Sit = false
    end
    for _, seat in ipairs(Workspace:GetDescendants()) do
        if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
            seat.Disabled = true
        end
    end
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clothe1s"):FireServer("CharacterSizeDown", 4)
    end)
    running = true
    local lastFlingTime = 0
    connection = RunService.Heartbeat:Connect(function()
        if not running or not targetPlayer.Character then return end
        local hrp = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        local hum = targetPlayer.Character:FindFirstChild("Humanoid")
        local myHRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not hrp or not hum or not myHRP then return end
        local moveDir = hum.MoveDirection
        local isStill = moveDir.Magnitude < 0.1
        local isSitting = hum.Sit
        if isSitting then
            local y = math.sin(tick() * 50) * 2
            soccerBall.CFrame = CFrame.new(hrp.Position + Vector3.new(0, 0.75 + y, 0))
        elseif isStill then
            local z = math.sin(tick() * 50) * 3
            soccerBall.CFrame = CFrame.new(hrp.Position + Vector3.new(0, 0.75, z))
        else
            local offset = moveDir.Unit * math.clamp(hrp.Velocity.Magnitude * 0.15, 5, 12)
            soccerBall.CFrame = CFrame.new(hrp.Position + offset + Vector3.new(0, 0.75, 0))
        end
        myHRP.CFrame = CFrame.new(soccerBall.Position + Vector3.new(0, 1, 0))
    end)
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running or not targetPlayer.Character then return end
        local hrp = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
        local dist = (soccerBall.Position - hrp.Position).Magnitude
        if dist < 4 and tick() - lastFlingTime > 0.4 then
            lastFlingTime = tick()
            for _, part in ipairs(targetPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
            local fling = Instance.new("BodyVelocity")
            fling.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            fling.Velocity = Vector3.new(math.random(-5, 5), 5, math.random(-5, 5)).Unit * 500000 + Vector3.new(0, 250000, 0)
            fling.Parent = hrp
            task.delay(0.3, function()
                fling:Destroy()
                for _, part in ipairs(targetPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end)
        end
    end)
end

-- Fun√ß√£o para fling com sof√°
local function flingWithSofa(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then
        print("Selecione um jogador v√°lido antes de iniciar!")
        return
    end
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then
        print("Seu personagem ainda n√£o est√° totalmente carregado.")
        return
    end
    savedPosition = myHRP.Position
    if not equipSofa() then return end
    task.wait(0.2)
    couch = character:FindFirstChild("Couch")
    if not couch then
        for _, obj in ipairs(Workspace:GetDescendants()) do
            if (obj.Name == "Couch" or obj.Name == "Couch" .. LocalPlayer.Name) and (obj:IsA("BasePart") or obj:IsA("Tool")) then
                couch = obj
                break
            end
        end
    end
    if not couch then
        print("Sof√° n√£o encontrado no personagem ou no Workspace!")
        return
    end
    if couch:IsA("BasePart") then
        originalProperties = {
            Anchored = couch.Anchored,
            CanCollide = couch.CanCollide,
            CanTouch = couch.CanTouch
        }
        couch.Anchored = false
        couch.CanCollide = true
        couch.CanTouch = true
        pcall(function() couch:SetNetworkOwner(nil) end)
    end
    running = true
    connection = RunService.Stepped:Connect(function()
        if not running then return end
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end)
    local startTime = tick()
    local walkFlingInstance = nil
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running then return end
        if not targetPlayer or not targetPlayer.Character then
            running = false
            return
        end
        local newTargetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        local newTargetHumanoid = targetPlayer.Character:FindFirstChild("Humanoid")
        if not newTargetHRP or not newTargetHumanoid then
            running = false
            return
        end
        if not myHRP or not humanoid then
            running = false
            return
        end
        pcall(function()
            local targetPosition = newTargetHRP.Position
            character:SetPrimaryPartCFrame(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 12000),
                    math.rad(Workspace.DistributedGameTime * 15000),
                    math.rad(Workspace.DistributedGameTime * 18000)
                )
            )
        end)
        if newTargetHumanoid.Sit or tick() - startTime > 10 then
            running = false
            flingConnection:Disconnect()
            flingConnection = nil
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                    pcall(function() part:SetNetworkOwner(nil) end)
                end
            end
            walkFlingInstance = Instance.new("BodyVelocity")
            walkFlingInstance.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            walkFlingInstance.Velocity = Vector3.new(math.random(-5, 5), 5, math.random(-5, 5)).Unit * 1000000 + Vector3.new(0, 1000000, 0)
            walkFlingInstance.Parent = myHRP
            pcall(function()
                myHRP.Anchored = true
                myHRP.CFrame = CFrame.new(Vector3.new(-59599.73, 2040070.50, -293391.16))
                myHRP.Anchored = false
            end)
            local spinStart = tick()
            local spinConnection
            spinConnection = RunService.Heartbeat:Connect(function()
                if tick() - spinStart >= 0.5 then
                    spinConnection:Disconnect()
                    return
                end
                pcall(function()
                    character:SetPrimaryPartCFrame(
                        myHRP.CFrame * CFrame.Angles(
                            math.rad(Workspace.DistributedGameTime * 12000),
                            math.rad(Workspace.DistributedGameTime * 15000),
                            math.rad(Workspace.DistributedGameTime * 18000)
                        )
                    )
                end)
            end)
            task.wait(0.2)
            local args = { [1] = "PlayerWantsToDeleteTool", [2] = "Couch" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clea1rTool1s"):FireServer(unpack(args))
            end)
            pcall(function()
                myHRP.Anchored = true
                myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                task.wait(0.1)
                myHRP.Velocity = Vector3.zero
                myHRP.RotVelocity = Vector3.zero
                myHRP.Anchored = false
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                end
            end)
            if walkFlingInstance then
                walkFlingInstance:Destroy()
                for _, part in ipairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
            if flingToggle then
                flingToggle:SetValue(false)
            end
        end
    end)
end

-- Fun√ß√£o para fling com √¥nibus (usando Body)
local function flingWithBus(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then
        print("Selecione um jogador v√°lido antes de iniciar!")
        return
    end
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then
        print("Seu personagem ainda n√£o est√° totalmente carregado.")
        return
    end
    savedPosition = myHRP.Position
    
    disableCarClient()
    
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1181.83, 76.08, -1158.83))
        task.wait(0.1)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
        end
    end)
    task.wait(0.2)
    
    local args = { [1] = "DeleteAllVehicles" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    
    args = { [1] = "PickingCar", [2] = "SchoolBus" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    task.wait(0.5)
    
    local vehiclesFolder = Workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then 
        print("Pasta Vehicles n√£o encontrada no Workspace!")
        enableCarClient()
        return 
    end
    local busName = LocalPlayer.Name .. "Car"
    local bus = vehiclesFolder:WaitForChild(busName, 3)
    if not bus then 
        print("√înibus n√£o encontrado em Workspace.Vehicles com o nome: " .. busName)
        enableCarClient()
        return 
    end
    
    local busBody = bus:FindFirstChild("Body")
    if not busBody then 
        print("Parte 'Body' n√£o encontrada no √¥nibus! Verifique a estrutura do modelo.")
        enableCarClient()
        return 
    end
    
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1171.71, 79.12, -1166.68))
        task.wait(0.1)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        humanoid:ChangeState(Enum.HumanoidStateType.Seated)
    end)
    
    local sitStart = tick()
    repeat
        task.wait()
        if tick() - sitStart > 5 then 
            print("Timeout: Jogador local n√£o foi detectado como sentado!")
            enableCarClient()
            return 
        end
    until humanoid.Sit
    
    for _, part in ipairs(bus:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
            pcall(function() part:SetNetworkOwner(nil) end)
        end
    end
    running = true
    connection = RunService.Stepped:Connect(function()
        if not running then return end
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end)
    local startTime = tick()
    local walkFlingInstancePlayer = nil
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running then return end
        if not targetPlayer or not targetPlayer.Character then
            running = false
            return
        end
        local newTargetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        local newTargetHumanoid = targetPlayer.Character:FindFirstChild("Humanoid")
        if not newTargetHRP or not newTargetHumanoid then
            running = false
            return
        end
        if not myHRP or not humanoid then
            running = false
            return
        end
        local offset = Vector3.new(math.random(-10, 10), 0, math.random(-10, 10))
        pcall(function()
            local targetPosition = newTargetHRP.Position + offset
            bus:PivotTo(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 12000),
                    math.rad(Workspace.DistributedGameTime * 15000),
                    math.rad(Workspace.DistributedGameTime * 18000)
                )
            )
        end)
        local playerSeated = false
        for _, seat in ipairs(bus:GetDescendants()) do
            if (seat:IsA("Seat") or seat:IsA("VehicleSeat")) and seat.Name ~= "VehicleSeat" then
                if seat.Occupant == newTargetHumanoid then
                    playerSeated = true
                    break
                end
            end
        end
        if playerSeated or tick() - startTime > 10 then
            running = false
            flingConnection:Disconnect()
            flingConnection = nil
            pcall(function()
                bus:PivotTo(CFrame.new(Vector3.new(-59599.73, 2040070.50, -293391.16)))
            end)
            
            walkFlingInstancePlayer = Instance.new("BodyVelocity")
            walkFlingInstancePlayer.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            walkFlingInstancePlayer.Velocity = Vector3.new(math.random(-5, 5), 5, math.random(-5, 5)).Unit * 1000000 + Vector3.new(0, 1000000, 0)
            walkFlingInstancePlayer.Parent = myHRP
            task.wait(0.2)
            
            local args = { [1] = "DeleteAllVehicles" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
            end)
            task.wait(0.2)
            
            if walkFlingInstancePlayer then
                walkFlingInstancePlayer:Destroy()
                for _, part in ipairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
            pcall(function()
                myHRP.Anchored = true
                myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                task.wait(0.1)
                myHRP.Velocity = Vector3.zero
                myHRP.RotVelocity = Vector3.zero
                myHRP.Anchored = false
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                end
            end)
            if flingToggle then
                flingToggle:SetValue(false)
            end
            
            enableCarClient()
        end
    end)
end

-- Fun√ß√£o para fling com barco (ajustada para funcionar como flingWithBall)
local function flingWithBoat(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then 
        print("Selecione um jogador v√°lido antes de iniciar!")
        return 
    end
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then 
        print("Seu personagem ainda n√£o est√° totalmente carregado.")
        return 
    end
    savedPosition = myHRP.Position
    
    -- Desativa o CarClient antes de qualquer opera√ß√£o
    disableCarClient()
    
    -- Teleporta para a posi√ß√£o inicial
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(-3359.52, -5.05, -501.94))
        task.wait(0.1)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
        end
    end)
    
    -- Remove todos os ve√≠culos existentes
    local args = { [1] = "DeleteAllVehicles" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    task.wait(0.2)
    
    -- Spawna o barco
    args = { [1] = "PickingBoat", [2] = "MilitaryBoatFree" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    task.wait(0.5)
    
    -- Localiza o barco no Workspace
    local vehiclesFolder = Workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then 
        print("Pasta Vehicles n√£o encontrada no Workspace!")
        enableCarClient()
        return 
    end
    local boatName = LocalPlayer.Name .. "Car"
    local boat = vehiclesFolder:WaitForChild(boatName, 3)
    if not boat then 
        print("Barco n√£o encontrado em Workspace.Vehicles com o nome: " .. boatName)
        enableCarClient()
        return 
    end
    
    -- Tenta encontrar a parte principal do barco (Body ou outra parte)
    local boatBody = boat:FindFirstChild("Body")
    if not boatBody then
        -- Se Body n√£o for encontrado, tenta encontrar qualquer BasePart no modelo do barco
        for _, part in ipairs(boat:GetDescendants()) do
            if part:IsA("BasePart") and not part:IsA("Seat") and not part:IsA("VehicleSeat") then
                boatBody = part
                break
            end
        end
    end
    if not boatBody then 
        print("Nenhuma parte principal (BasePart) encontrada no barco! Verifique a estrutura do modelo.")
        enableCarClient()
        return 
    end
    
    -- Configura o barco para ser manipulado pelo servidor
    originalProperties = {
        Anchored = boatBody.Anchored,
        CanCollide = boatBody.CanCollide,
        CanTouch = boatBody.CanTouch
    }
    boatBody.Anchored = false
    boatBody.CanCollide = true
    boatBody.CanTouch = true
    pcall(function() boatBody:SetNetworkOwner(nil) end)
    
    -- Desativa colis√£o de todas as partes do barco para evitar travamentos
    for _, part in ipairs(boat:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
            pcall(function() part:SetNetworkOwner(nil) end)
        end
    end
    
    -- Configura o jogador
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
        end
    end
    if humanoid then
        humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
        humanoid.Sit = false
    end
    for _, seat in ipairs(Workspace:GetDescendants()) do
        if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
            seat.Disabled = true
        end
    end
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clothe1s"):FireServer("CharacterSizeDown", 4)
    end)
    
    running = true
    local lastFlingTime = 0
    connection = RunService.Heartbeat:Connect(function()
        if not running or not targetPlayer.Character then return end
        local hrp = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        local hum = targetPlayer.Character:FindFirstChild("Humanoid")
        local myHRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not hrp or not hum or not myHRP then return end
        local moveDir = hum.MoveDirection
        local isStill = moveDir.Magnitude < 0.1
        local isSitting = hum.Sit
        if isSitting then
            local y = math.sin(tick() * 50) * 2
            boatBody.CFrame = CFrame.new(hrp.Position + Vector3.new(0, 0.75 + y, 0))
        elseif isStill then
            local z = math.sin(tick() * 50) * 3
            boatBody.CFrame = CFrame.new(hrp.Position + Vector3.new(0, 0.75, z))
        else
            local offset = moveDir.Unit * math.clamp(hrp.Velocity.Magnitude * 0.15, 5, 12)
            boatBody.CFrame = CFrame.new(hrp.Position + offset + Vector3.new(0, 0.75, 0))
        end
        myHRP.CFrame = CFrame.new(boatBody.Position + Vector3.new(0, 1, 0))
    end)
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running or not targetPlayer.Character then return end
        local hrp = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
        local dist = (boatBody.Position - hrp.Position).Magnitude
        if dist < 4 and tick() - lastFlingTime > 0.4 then
            lastFlingTime = tick()
            for _, part in ipairs(targetPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
            local fling = Instance.new("BodyVelocity")
            fling.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            fling.Velocity = Vector3.new(math.random(-5, 5), 5, math.random(-5, 5)).Unit * 500000 + Vector3.new(0, 250000, 0)
            fling.Parent = hrp
            task.delay(0.3, function()
                fling:Destroy()
                for _, part in ipairs(targetPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end)
        end
    end)
end

-- Fun√ß√£o para parar o fling
local function stopFling()
    running = false
    if connection then
        connection:Disconnect()
        connection = nil
    end
    if flingConnection then
        flingConnection:Disconnect()
        flingConnection = nil
    end
    for _, conn in ipairs(touchedConnections) do
        conn:Disconnect()
    end
    touchedConnections = {}
    
    if soccerBall then
        soccerBall.Anchored = originalProperties.Anchored
        soccerBall.CanCollide = originalProperties.CanCollide
        soccerBall.CanTouch = originalProperties.CanTouch
    end
    if couch and couch:IsA("BasePart") then
        couch.Anchored = originalProperties.Anchored
        couch.CanCollide = originalProperties.CanCollide
        couch.CanTouch = originalProperties.CanTouch
    end
    
    local args = { [1] = "DeleteAllVehicles" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    task.wait(0.2)
    
    local character = LocalPlayer.Character
    if character then
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
                part.Velocity = Vector3.zero
                part.RotVelocity = Vector3.zero
            end
        end
    end
    local myHumanoid = character and character:FindFirstChild("Humanoid")
    if myHumanoid then
        myHumanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
    end
    for _, seat in ipairs(Workspace:GetDescendants()) do
        if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
            seat.Disabled = false
        end
    end
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clothe1s"):FireServer("CharacterSizeUp", 1)
    end)
    if savedPosition then
        local myHRP = character and character:FindFirstChild("HumanoidRootPart")
        if myHRP then
            pcall(function()
                myHRP.Anchored = true
                myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                task.wait(0.1)
                myHRP.Velocity = Vector3.zero
                myHRP.RotVelocity = Vector3.zero
                myHRP.Anchored = false
                if myHumanoid then
                    myHumanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                end
            end)
        end
    end
    
    enableCarClient()
end

-- Toggle para ativar/desativar o fling
print("Criando o toggle para ativar/desativar o fling...")
flingToggle = Tab10:Toggle({
    Title = "Ativar Fling",
    Desc = "Ativa ou desativa o fling com o m√©todo selecionado",
    Default = false,
    Callback = function(state)
        if state then
            if isFollowingKill or isFollowingPull or running then
                print("Uma a√ß√£o j√° est√° ativa. Use o bot√£o Parar (Matar ou Puxar) primeiro.")
                flingToggle:SetValue(false)
                return
            end
            if not selectedPlayer then
                print("Nenhum jogador selecionado!")
                flingToggle:SetValue(false)
                return
            end
            if not selectedFlingMethod then
                print("Nenhum m√©todo de fling selecionado!")
                flingToggle:SetValue(false)
                return
            end
            if selectedFlingMethod == "Bola" then
                flingWithBall(selectedPlayer)
            elseif selectedFlingMethod == "Sof√°" then
                flingWithSofa(selectedPlayer)
            elseif selectedFlingMethod == "√înibus" then
                flingWithBus(selectedPlayer)
            elseif selectedFlingMethod == "Barco" then
                flingWithBoat(selectedPlayer)
            end
        else
            stopFling()
        end
    end
})
print("Toggle para ativar/desativar o fling criado com sucesso!")

-- Aviso sobre o fling com barco
Tab10:Paragraph({ 
    Title = "fling barco op mais n recomendo ele pod causar travamento!!! e use o noclip ", 
    Desc = ""
})

print("Script inicializado com sucesso! A UI deve estar vis√≠vel agora.")
