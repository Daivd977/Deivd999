-- copy avatar 

-- Carrega a WindUI
local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()
local Version = "1.4.0"
local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI/" .. Version))()

local Window = WindUI:CreateWindow({
    Title = "Lolyta Hub 3.1",
    Icon = "door-open",
    Author = "Lolycon666",
    Folder = "Lolyta hub v.1.666",
    Size = UDim2.fromOffset(580, 460),
    KeySystem = {
        Key = "666",
        Note = "pode nao man",
        URL = "",
        SaveKey = true,
    },
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 200,
    HasOutline = false,
})

Window:EditOpenButton({
    Title = "Lolyta",
    Icon = "align-justify",
    CornerRadius = UDim.new(0, 10),
    StrokeThickness = 3,
    Color = ColorSequence.new(Color3.fromHex("FF0F7B"), Color3.fromHex("F89B29"))
})

-- Definir tab1
local Tab1 = Window:Tab({ Title = "Main", Icon = "house-plus" })

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local MarketplaceService = game:GetService("MarketplaceService")

local LocalPlayer = Players.LocalPlayer
local selectedPlayerName = nil
local selectedMethod = "Avatar Atual (Brookhaven)"

-- Função para converter Color3 ou BrickColor em nome de cor do Roblox
local function color3ToColorName(color)
    if not color or not typeof(color) == "Color3" then
        return "Nougat"
    end

    local colorMap = {
        [Color3.fromRGB(242, 243, 243)] = "White",
        [Color3.fromRGB(163, 162, 165)] = "Light gray",
        [Color3.fromRGB(27, 42, 53)] = "Black",
        [Color3.fromRGB(255, 176, 0)] = "Bright orange",
        [Color3.fromRGB(245, 205, 48)] = "Bright yellow",
        [Color3.fromRGB(75, 151, 75)] = "Bright green",
        [Color3.fromRGB(40, 127, 71)] = "Dark green",
        [Color3.fromRGB(0, 112, 221)] = "Bright blue",
        [Color3.fromRGB(196, 40, 28)] = "Bright red",
        [Color3.fromRGB(234, 184, 146)] = "Light orange",
        [Color3.fromRGB(255, 0, 255)] = "Hot pink",
        [Color3.fromRGB(159, 161, 172)] = "Gray",
        [Color3.fromRGB(199, 172, 120)] = "Nougat",
        [Color3.fromRGB(148, 107, 75)] = "Cork",
        [Color3.fromRGB(124, 92, 70)] = "Brown",
        [Color3.fromRGB(218, 133, 65)] = "Sand red",
        [Color3.fromRGB(175, 148, 131)] = "Linen",
        [Color3.fromRGB(255, 201, 201)] = "Pastel brown"
    }

    local color3Value
    if typeof(color) == "BrickColor" then
        color3Value = color.Color
    else
        color3Value = Color3.new(math.clamp(color.R, 0, 1), math.clamp(color.G, 0, 1), math.clamp(color.B, 0, 1))
    end

    for refColor, colorName in pairs(colorMap) do
        if refColor.R == color3Value.R and refColor.G == color3Value.G and refColor.B == color3Value.B then
            return colorName
        end
    end

    local closestColorName = "Nougat"
    local minDistance = math.huge
    for refColor, colorName in pairs(colorMap) do
        local distance = (refColor.R - color3Value.R)^2 + (refColor.G - color3Value.G)^2 + (refColor.B - color3Value.B)^2
        if distance < minDistance then
            minDistance = distance
            closestColorName = colorName
        end
    end

    return closestColorName
end

local function getPlayerNames()
    local names = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(names, player.Name)
        end
    end
    return names
end

-- Dropdown de jogadores
local PlayerDropdown
local success, err = pcall(function()
    PlayerDropdown = Tab1:Dropdown({
        Title = "Selecionar Jogador",
        Desc = "Escolha um jogador para copiar visual",
        Value = nil,
        Multi = false,
        AllowNone = true,
        Values = getPlayerNames(),
        Callback = function(name)
            selectedPlayerName = name
        end
    })
end)

-- Atualizar a lista de jogadores
local function updatePlayerList()
    local currentPlayers = getPlayerNames()
    if type(currentPlayers) ~= "table" then
        return
    end

    local playerList = {}
    for _, name in ipairs(currentPlayers) do
        if type(name) == "string" then
            table.insert(playerList, name)
        end
    end

    local success, err = pcall(function()
        if PlayerDropdown then
            PlayerDropdown:SetValues(playerList)
        end
    end)
    if not success then
        local success2, err2 = pcall(function()
            PlayerDropdown = Tab1:Dropdown({
                Title = "Selecionar Jogador",
                Desc = "Escolha um jogador para copiar visual",
                Value = nil,
                Multi = false,
                AllowNone = true,
                Values = playerList,
                Callback = function(name)
                    selectedPlayerName = name
                end
            })
        end)
    end
end

-- Limpar jogadores que saíram
local function cleanPlayerList()
    local currentPlayers = getPlayerNames()
    local dropdownValues = {}
    local success, err = pcall(function()
        dropdownValues = PlayerDropdown:GetValues() or {}
    end)
    if not success then
        return
    end

    local updatedList = {}
    for _, name in ipairs(dropdownValues) do
        if table.find(currentPlayers, name) then
            table.insert(updatedList, name)
        end
    end

    local success, err = pcall(function()
        if PlayerDropdown then
            PlayerDropdown:SetValues(updatedList)
        end
    end)
    if not success then
        local success2, err2 = pcall(function()
            PlayerDropdown = Tab1:Dropdown({
                Title = "Selecionar Jogador",
                Desc = "Escolha um jogador para copiar visual",
                Value = nil,
                Multi = false,
                AllowNone = true,
                Values = updatedList,
                Callback = function(name)
                    selectedPlayerName = name
                end
            })
        end)
    end
end

-- Inicializar a lista de jogadores
updatePlayerList()

-- Botão para atualizar a lista de jogadores manualmente
local success, err = pcall(function()
    Tab1:Button({
        Title = "Atualizar Lista de Jogadores",
        Desc = "Atualiza manualmente a lista de jogadores",
        Callback = function()
            updatePlayerList()
        end
    })
end)

-- Botão para limpar jogadores que saíram
local success, err = pcall(function()
    Tab1:Button({
        Title = "Limpar Jogadores que Sairam",
        Desc = "Remove jogadores que já saíram da lista",
        Callback = function()
            cleanPlayerList()
        end
    })
end)

-- Dropdown para selecionar o método de cópia
local MethodDropdown
local success, err = pcall(function()
    MethodDropdown = Tab1:Dropdown({
        Title = "Método de Cópia",
        Desc = "Escolha entre copiar o avatar atual ou o real",
        Value = "Avatar Atual (Brookhaven)",
        Multi = false,
        AllowNone = false,
        Values = {"Avatar Atual (Brookhaven)", "Avatar Real (Roblox)"},
        Callback = function(method)
            selectedMethod = method
        end
    })
end)

-- Função para obter a descrição do jogador alvo
local function getTargetDescription()
    if not selectedPlayerName then
        return nil
    end

    local target = Players:FindFirstChild(selectedPlayerName)
    if not target then
        return nil
    end

    local desc
    if selectedMethod == "Avatar Atual (Brookhaven)" then
        if not target.Character then
            return nil
        end
        local humanoid = target.Character:FindFirstChildWhichIsA("Humanoid")
        if not humanoid then
            return nil
        end
        desc = humanoid:GetAppliedDescription()
        if not desc then
            return nil
        end
    else
        local success, result = pcall(function()
            return Players:GetHumanoidDescriptionFromUserId(target.UserId)
        end)
        if not success then
            return nil
        end
        desc = result
    end

    return desc, target
end



-- Botão para copiar visual completo
local success, err = pcall(function()
    Tab1:Button({
        Title = "Copiar Visual Completo",
        Desc = "Copia roupas, acessórios, animações, cor e corpo",
        Callback = function()
            local desc, target = getTargetDescription()
            if not desc then return end

            local localHumanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
            local localDesc = localHumanoid and localHumanoid:GetAppliedDescription()

            -- Copiar acessórios
            local currentAccessories = {}
            if localDesc then
                local accessoryFields = {
                    "HatAccessory",
                    "HairAccessory",
                    "FaceAccessory",
                    "NeckAccessory",
                    "FrontAccessory",
                    "BackAccessory",
                    "WaistAccessory"
                }
                for _, field in ipairs(accessoryFields) do
                    local ids = localDesc[field]
                    if ids and ids ~= "" then
                        for id in string.gmatch(ids, "%d+") do
                            table.insert(currentAccessories, tonumber(id))
                        end
                    end
                end
            end

            local accessoryFields = {
                "HatAccessory",
                "HairAccessory",
                "FaceAccessory",
                "NeckAccessory",
                "FrontAccessory",
                "BackAccessory",
                "WaistAccessory"
            }
            local accessoryIds = {}
            for _, field in ipairs(accessoryFields) do
                local ids = desc[field]
                if ids and ids ~= "" then
                    for id in string.gmatch(ids, "%d+") do
                        local accessoryId = tonumber(id)
                        if accessoryId and accessoryId ~= 0 and not table.find(currentAccessories, accessoryId) then
                            table.insert(accessoryIds, accessoryId)
                        end
                    end
                end
            end

            if selectedMethod == "Avatar Atual (Brookhaven)" and target.Character then
                local characterChildren = target.Character:GetChildren()
                for _, item in ipairs(characterChildren) do
                    if item:IsA("Accessory") then
                        local handle = item:FindFirstChild("Handle")
                        if handle then
                            local assetId = handle:FindFirstChild("AssetId") or handle:FindFirstChild("AccessoryId")
                            if not assetId then
                                local success, itemId = pcall(function()
                                    return MarketplaceService:GetProductInfo(tonumber(item.Name:match("%d+")) or 0).AssetId
                                end)
                                if success and itemId then
                                    assetId = Instance.new("IntValue")
                                    assetId.Value = itemId
                                else
                                    local possibleId = item:FindFirstChild("AccessoryId") or item:FindFirstChild("AssetId")
                                    if possibleId then
                                        assetId = possibleId
                                    else
                                        for _, child in ipairs(item:GetDescendants()) do
                                            if child:IsA("StringValue") and child.Name == "AssetId" then
                                                assetId = Instance.new("IntValue")
                                                assetId.Value = tonumber(child.Value) or 0
                                                break
                                            end
                                        end
                                    end
                                end
                            end
                            if assetId and assetId.Value and assetId.Value ~= 0 and not table.find(currentAccessories, assetId.Value) and not table.find(accessoryIds, assetId.Value) then
                                table.insert(accessoryIds, assetId.Value)
                            end
                        end
                    end
                end
            end

            for _, accessoryId in ipairs(accessoryIds) do
                local args = { accessoryId }
                local success, err = pcall(function()
                    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Wear"):InvokeServer(unpack(args))
                end)
                task.wait(1.5)
            end

            -- Copiar partes do corpo
            local bodyFields = {
                "Head",
                "LeftArm",
                "LeftLeg",
                "RightArm",
                "RightLeg",
                "Torso"
            }
            for _, field in ipairs(bodyFields) do
                local id = desc[field]
                local numId = tonumber(id) or 0
                if numId ~= 0 then
                    local success, err = pcall(function()
                        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Wear"):InvokeServer(numId)
                    end)
                    if not success then
                        if localHumanoid then
                            local tempDesc = localHumanoid:GetAppliedDescription()
                            tempDesc[field] = numId
                            local success2, err2 = pcall(function()
                                localHumanoid:ApplyDescription(tempDesc)
                            end)
                        end
                    end
                end
                task.wait(0.5)
            end

            -- Copiar animações
            local animationFields = {
                "IdleAnimation",
                "WalkAnimation",
                "RunAnimation",
                "JumpAnimation",
                "ClimbAnimation",
                "FallAnimation"
            }
            for _, field in ipairs(animationFields) do
                local id = desc[field]
                if id and id ~= 0 then
                    local success, err = pcall(function()
                        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ChangeCharacterBody"):InvokeServer({ [field] = id })
                    end)
                    task.wait(0.5)
                end
            end

            -- Copiar roupas (camisa, calça e rosto)
            if desc.Shirt and desc.Shirt ~= 0 and (not localDesc or localDesc.Shirt ~= desc.Shirt) then
                local shirtArgs = { desc.Shirt }
                local success, err = pcall(function()
                    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Wear"):InvokeServer(unpack(shirtArgs))
                end)
                task.wait(1)
            end

            if desc.Pants and desc.Pants ~= 0 and (not localDesc or localDesc.Pants ~= desc.Pants) then
                local pantsArgs = { desc.Pants }
                local success, err = pcall(function()
                    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Wear"):InvokeServer(unpack(pantsArgs))
                end)
                task.wait(1)
            end

            if desc.Face and desc.Face ~= 0 and (not localDesc or localDesc.Face ~= desc.Face) then
                local faceArgs = { desc.Face }
                local success, err = pcall(function()
                    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Wear"):InvokeServer(unpack(faceArgs))
                end)
                task.wait(1)
            end

            -- Copiar cor do corpo
            local bodyColor = nil
            if selectedMethod == "Avatar Atual (Brookhaven)" and target.Character then
                local bodyColors = target.Character:FindFirstChild("Body Colors")
                if bodyColors then
                    bodyColor = bodyColors.TorsoColor
                end
            end
            if not bodyColor then
                bodyColor = desc.TorsoColor or desc.HeadColor or Color3.fromRGB(199, 172, 120)
            end

            local colorName = color3ToColorName(bodyColor)
            local localBodyColors = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Body Colors")
            local currentColorName = localBodyColors and color3ToColorName(localBodyColors.TorsoColor) or nil

            local shouldCopyColor = false
            if not currentColorName or currentColorName ~= colorName then
                shouldCopyColor = true
            elseif localBodyColors and localBodyColors.TorsoColor and typeof(bodyColor) == "Color3" and typeof(localBodyColors.TorsoColor) == "Color3" then
                if bodyColor.R ~= localBodyColors.TorsoColor.R or bodyColor.G ~= localBodyColors.TorsoColor.G or bodyColor.B ~= localBodyColors.TorsoColor.B then
                    shouldCopyColor = true
                end
            end

            if shouldCopyColor then
                local success, err = pcall(function()
                    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ChangeBodyColor"):FireServer(colorName)
                end)
                if not success then
                    local success2, err2 = pcall(function()
                        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ChangeBodyColor"):FireServer("Nougat")
                    end)
                end
            end
            task.wait(1)
        end
    })
end)
